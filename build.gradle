plugins {
    id 'application'
    id 'checkstyle'
    id 'pmd'
    id  'org.sonarqube' version '2.5'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.4.RELEASE'
    id 'org.springframework.boot' version '1.5.9.RELEASE'
    id 'org.owasp.dependencycheck' version '3.1.0'
    id 'com.github.ben-manes.versions' version '0.17.0'
}

group = 'uk.gov.hmcts.reform'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    archiveName 'track-your-appeal-notifications.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.7'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
    toolVersion = "5.8.1"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

def springBootVersion = plugins.getPlugin('org.springframework.boot').class.package.implementationVersion

repositories {
    jcenter()
}

configurations {
    integrationTestCompile.extendsFrom(testCompile)
    integrationTestRuntime.extendsFrom(testRuntime)
}

def versions = [
        springfoxSwagger: '2.7.0'
]

bootRun {
    systemProperty 'server.port', '8081'
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: '1.4.0'
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: '1.4.0'
    compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix', version: '1.4.0.RELEASE'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix-dashboard', version: '1.4.0.RELEASE'

    compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.0.0-RELEASE'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/IntegrationTests/java')
        }
        resources {
            srcDir('src/IntegrationTests/resources')
        }
    }
}

dependencies {
    integrationTestCompile(sourceSets.test.output)
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests'
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

sonarqube {
    properties {
        property "sonar.projectName", "SSCS - Track Your Appeal Notifications"
        property "sonar.projectKey", "SSCSTYANS"
        property "sonar.exclusions", "src/main/java/uk/gov/hmcts/sscs/domain/**," +
                "src/main/java/uk/gov/hmcts/sscs/TrackYourAppealNotificationsApplication.java," +
                "src/main/java/uk/gov/hmcts/sscs/config/*,"
    }
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {

}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {

}

